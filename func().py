def func_1():  # Объявление функции.
    print('Hello')  # Тело функции.


func_1()  # Вызов функции.


def func_2(n):  # Объявление функции с параметром 'n'
    print(n)


m = 5
func_2(m)  # Вызов функции с аргументом.

# Аргумент – это любая порция данных, которая передается в функцию, когда функция вызывается.
# Параметр – это переменная, которая получает аргумент, переданный в функцию.
# Локальными называются переменные, объявленные внутри функции и доступные только ей самой.
# Глобальными называются переменные, объявленные в основной программе и доступные как программе, так и всем ее функциям.
# Если нужно, чтобы инструкция внутри функции присваивала значение глобальной переменной,
# то требуется дополнительный шаг.
# В этом случае, глобальная переменная должна быть объявлена внутри функции.

# лямбда-функция (также известная как анонимная функция) — это небольшая, анонимная функция,
# которая определяется с помощью ключевого слова lambda. Они полезны для коротких функций,
# которые не требуют полного определения с использованием оператора def

# lambda arguments: expression

# lambda: Ключевое слово, указывающее на создание лямбда-функции.
# arguments: Список аргументов, разделенных запятыми (как и в обычной функции). Может быть пустым списком.
# expression: Выражение, которое вычисляется и возвращается функцией.
# Важно: это должно быть одно выражение, а не блок кода с несколькими операторами.

add = lambda x, y: x + y
print(add(20, 400))


def func_3(n):
    if n != 1:
        return 1  # Возвращает значение.
    return n  # Возвращает значение.


m = 1
print(func_3(m))


# Позиционные аргументы в Python — это значения, которые передаются в функцию в том порядке,
# в каком они определены при создании функции

def func_4(a, b, c):
    print(a + b + c)


d, e, f = 1, 2, 3
func_4(d, e, f)  # Вызов функции с позиционными аргументами
func_4(a=4, b=4, c=4)  # Вызов функции с именованными аргументами


def func(*args):
    return len(args), sum(args), min(args), list(args), [i ** 2 for i in list(args)]


print(func(1, 2, 3, 4, 5, 6, 7, 8, 9))

'''Звездочка в определении функции означает, 
что переменная (параметр) args получит в виде кортежа все аргументы, 
переданные в функцию при ее вызове от текущей позиции и до конца.

Параметр args в определении функции пишется после позиционных параметров, 
перед первым параметром со значением по умолчанию.'''


# Именованные аргументы в виде словаря
def func(**kwargs):
    return kwargs


slovar = {'a': 1, 'b': 2, 'c': 3}
print(func(**slovar))

# map() — это встроенная функция, которая применяется к каждому элементу итерируемого объекта
# (например, списка, кортежа, строки) и возвращает итератор,
# содержащий результаты применения функции к каждому элементу.

# map(function, iterable, ...)
# function: Функция, которая будет применена к каждому элементу. Это может быть любая вызываемая функция, включая лямбда-функции.
# iterable: Итерируемый объект (список, кортеж, строка и т.д.), элементы которого будут переданы в функцию.
# ...: Можно указать несколько итерируемых объектов, если функция принимает несколько аргументов.
# В этом случае map() будет "сцеплять" элементы из этих объектов.

numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]
print(max(numbers, key=abs))
print(list(map(str, numbers)))  # ['10', '-7', '8', '-100', '-50', '32', '87', '117', '-210']
print(max(list(map(abs, numbers))))  # 210

names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 28]
# Создание пар "имя:возраст"
person_data = list(map(lambda name, age: f"{name}: {age}", names, ages))
print(person_data)  # Вывод: ['Alice: 25', 'Bob: 30', 'Charlie: 28']

# filter() в Python — это встроенная функция, которая используется для фильтрации итерируемого объекта
# (например, списка, кортежа) на основе заданного условия.
# Она возвращает итератор, содержащий только те элементы из исходного итерируемого объекта,
# которые удовлетворяют условию.

# filter(function, iterable)
# function: Функция, которая принимает один аргумент (элемент из iterable) и возвращает True
# (если элемент удовлетворяет условию) или False (иначе).
# Это может быть любая вызываемая функция, включая лямбда-функции.
# iterable: Итерируемый объект (список, кортеж, строка и т.д.),
# элементы которого будут проверены на соответствие условию.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

even = list(filter(lambda x: x % 2 == 0, numbers))
print(even)

words = ["apple", "banana", "kiwi", "orange", "grape"]
len_words = list(filter(lambda x: len(x) > 5, words))
print(len_words)  # ['banana', 'orange']

# Функция zip возвращает итератор,
# который поэлементно группирует в кортеж значения
# из переданных в параметр iterables итерируемых объектов.
# Итератор, созданный zip, завершится,
# когда закончатся элементы в одной из коллекций в iterables.

words = ['approach', 'monstrous', 'mobile', 'voucher', 'solid']
numbers = [100, 200, 300, 400, 500]
print(list(zip(words, numbers)))
